package ru.igrey.dev.service;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * User: Vladimir Koba
 * Date: 14.06.2017
 * Time: 22:32
 */
public class MoasHex2IsoServiceTest {

    private static MoasHex2IsoService hexToIsoService = new MoasHex2IsoService();

    @Test
    public void incorrectMessageReturnErrorMessage() {
        assertThat(hexToIsoService.parse("ku")).isEqualToIgnoringCase("cannot parse this message");
    }

    @Test
    public void parsingHexMessageWithoutHeaderIsCorrect() {
        String isoText = hexToIsoService.parse("30313130766100018ac0a002313632323030303530373031323232323235303030303030303030303030303130303030303030303030303130303030313132303138303635313631303030303030333137363739313132303131373031303030323031303131313730313030303230313031353332343138333137363739393149544d43524f574242504320202020202020202020202036343336343330323330303031353031323434353630393134363032304d5044");
        assertThat(isoText.trim()).isEqualTo("f-1=[bitmap[{2, 3, 4, 6, 7, 10, 11, 16, 32, 33, 37, 39, 41, 42, 49, 51, 63}]],f0=[0110],f2=[2200050701222225],f3=[f1=[00],f2=[00],f3=[00],],f4=[000000010000],f6=[000000010000],f7=[1120180651],f10=[61000000],f11=[317679],f16=[1120],f32=[70100020101],f33=[70100020101],f37=[532418317679],f39=[91],f41=[ITMCROWB],f42=[BPC            ],f49=[643],f51=[643],f63=[f1=[0001],f2=[5012445609146020],f3=[MPD],],");
    }

    @Test
    public void parsingHexMessageWithWhitespacesIsCorrect() {
        String isoText = hexToIsoService.parse("    30 31 31 30766100018ac0a00231363232  30 3030 3530373031323232323235303030303030303030303030303130303030303030303030303130303030313132303138303635313631303030303030333137363739313132303131373031303030323031303131313730313030303230313031353332343138333137363739393149544d43524f574242504320202020202020202020202036343336343330323330303031353031323434353630393134363032304d5044");
        assertThat(isoText.trim()).isEqualTo("f-1=[bitmap[{2, 3, 4, 6, 7, 10, 11, 16, 32, 33, 37, 39, 41, 42, 49, 51, 63}]],f0=[0110],f2=[2200050701222225],f3=[f1=[00],f2=[00],f3=[00],],f4=[000000010000],f6=[000000010000],f7=[1120180651],f10=[61000000],f11=[317679],f16=[1120],f32=[70100020101],f33=[70100020101],f37=[532418317679],f39=[91],f41=[ITMCROWB],f42=[BPC            ],f49=[643],f51=[643],f63=[f1=[0001],f2=[5012445609146020],f3=[MPD],],");
    }

    @Test
    public void parsingHexMessageWithHeaderIsCorrect() {
        String isoText = hexToIsoService.parse
        assertThat(isoText.trim()).isEqualTo("f-1=[bitmap[{2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 16, 18, 22, 23, 32, 33, 35, 37, 41, 42, 43, 49, 51, 61, 63}]],f0=[0100],f2=[2200050701222225],f3=[f1=[00],f2=[00],f3=[00],],f4=[000000010000],f6=[000000010000],f7=[1120180651],f10=[61000000],f11=[317679],f12=[210651],f13=[1120],f14=[1805],f16=[1120],f18=[5411],f22=[f1=[00],f2=[0],],f23=[000],f32=[70100020101],f33=[70100020101],f35=[2200050701222225=123456789123456789],f37=[532418317679],f41=[ITMCROWB],f42=[BPC            ],f43=[f1=[Sev.Chertanovo,d.4,k.4],f2=[ ],f3=[G MOSKVA     ],f4=[ ],f5=[RUS],],f49=[643],f51=[643],f61=[101100010],f63=[f1=[0001],f2=[5012445609146034],f3=[MPD],],");
    }




}